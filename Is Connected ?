#include <iostream>
#include<bits/stdc++.h>
using namespace std;
bool BFS(int **edges,int V,bool *visited,int sv){
	queue <int> remainingVertices;
	remainingVertices.push(sv);
	visited[sv] = true;
	while(!remainingVertices.empty()){
		
		int d = remainingVertices.front();
		remainingVertices.pop();
		//cout<<d<<" ";		
		
		for(int i=0;i<V;i++){
			if(visited[i]){
			continue;
			}
			if(edges[d][i]==1){
			remainingVertices.push(i);
			visited[i] = true;
			}	
		
		}	
	}
    for(int i=0;i<V;i++){
        if(!visited[i])
            return false;
    }
    return true;
}
int main() {
    int V, E;
    cin >> V >> E;

  /*

  	   Write Your Code Here
	   Complete the Rest of the Program
	   You have to take input and print the output yourself
	 
  */
   int**edges = new int*[V];
   for(int i=0;i<V;i++){
       edges[i] = new int[V];
   } 
   for(int i=0;i<E;i++){
       int f,s;
       cin>>f>>s;
       edges[f][s] = 1;
       edges[s][f] = 1;
   }
   bool *visited = new bool[V];
   memset(visited,false,V*sizeof(bool));
   bool ans = BFS(edges,V,visited,0);
   if(ans)
       cout<<"true";
    else
        cout<<"false";
return 0;
}
