//An island is a small piece of land surrounded by water . A group of islands is said to be connected if we can reach from any given island to any other island in the same group . Given N islands (numbered from 1 to N) and two lists of size M (u and v) denoting island u[i] is connected to island v[i] and vice versa . Can you count the number of connected groups of islands.
//Constraints :
//1<=N<=100
//1<=M<=(N*(N-1))/2
//1<=u[i],v[i]<=N
//ONLY FUNCTIONS REQUIRED
#include<bits/stdc++.h>
using namespace std;
vector< vector<int> > AllComponents(int **edges,bool *visited,int V){
	vector< vector<int> >  v;
	for(int i=1;i<=V;i++){
		vector<int> curr_graph;
		queue<int> curr_vertices;
		int d = i;
		if(!visited[d]){
			curr_vertices.push(d);
			curr_graph.push_back(d);
			visited[d] = true;
		}
		while(!curr_vertices.empty()){
			d = curr_vertices.front();
			curr_vertices.pop();
			for(int j=1;j<=V;j++){
				if(edges[j][d]==1&&!visited[j]){
					curr_vertices.push(j);
					curr_graph.push_back(j);
					visited[j] = true;
				}
			}
		}
		v.push_back(curr_graph);
		
	}
	return v;
}
int solve(int n,int m,vector<int>u,vector<int>v)
{
	// Write your code here .
    
    int**edges = new int*[n+1];
   for(int i=0;i<=n;i++){
       edges[i] = new int[n+1];
   } 
   for(int i=0;i<m;i++){
       edges[u[i]][v[i]] = 1;
       edges[v[i]][u[i]] = 1;
   }   
    bool *visited = new bool[n+1];
	memset(visited,false,(n+1)*sizeof(bool));
    vector< vector<int> > q;
    q =  AllComponents(edges,visited,n);
    int count = 0;
    for(int i=0;i<q.size();i++){
        if(!q[i].empty())
        {
            //cout<<q[i][0]<<" ";
            count++;}
	}
    return count;
}
