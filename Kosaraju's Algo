#include<bits/stdc++.h>
using namespace std;
void dfs(vector<int> *edges,int start,stack<int> &finishedVertex,unordered_set<int> &visited){
	visited.insert(start);
	for(int i=0;i<edges[start].size();i++){
		
		if(visited.count(edges[start][i])==0){
			dfs(edges,edges[start][i],finishedVertex,visited);	
		}
	}
	finishedVertex.push(start);
}
void dfs2(vector<int> *edges,int start,unordered_set<int>*component,unordered_set<int> &visited){
	visited.insert(start);
	component->insert(start);
	for(int i=0;i<edges[start].size();i++){
		if(visited.count(edges[start][i])==0){
			dfs2(edges,edges[start][i],component,visited);
		}	
	}
}
unordered_set< unordered_set<int>* >* getSSC(vector<int> *edges,vector<int>* edgesT,int n){
	unordered_set<int> visited;
	stack<int> finishedVertices;
	for(int i=0;i<n;i++){
		if(visited.count(i)==0){
			dfs(edges,i,finishedVertices,visited);
		}	
	}
	unordered_set< unordered_set<int>* >* output = new unordered_set< unordered_set<int>* >();
	visited.clear();
	while(finishedVertices.size()!=0){
		int element = finishedVertices.top();
		finishedVertices.pop();
		if(visited.count(element)!=0){
			continue;
		}
		unordered_set<int>* component = new unordered_set<int>();
		dfs2(edgesT,element,component,visited);
		output->insert(component);
	}
	return output;
}
int main(){
	
	int n,E;
	cin>>n>>E;
	vector<int> *edges = new vector<int>[n];
	vector<int> *edgest = new vector<int>[n];
	for(int i=0;i<E;i++){
		int first,second;
		cin>>first>>second;
		edges[first-1].push_back(second-1);
		edgest[second-1].push_back(first-1);
	}
	unordered_set< unordered_set<int>* >* components = getSSC(edges,edgest,n);
	unordered_set< unordered_set<int> *>::iterator it = components->begin();
	while(it!=components->end()){
		unordered_set<int>* component = *it;
		unordered_set<int>::iterator it1 = component->begin();
		while(it1!=component->end()){
			cout<<*it1+1<<" ";
			it1++;
		}
		cout<<endl; 
		it++;
	}
	delete components;
	delete []edges;
	delete []edgest; 
	return 0;
}
